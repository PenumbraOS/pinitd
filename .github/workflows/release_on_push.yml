name: Release on Push

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28c
          add-to-path: true
          link-to-sdk: true

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Build Rust binaries
        run: cargo ndk -t arm64-v8a build --release

      - name: Copy pinitd into APK build location
        run: |
          mkdir -p android/app/src/main/jniLibs/arm64-v8a/
          cp target/aarch64-linux-android/release/pinitd android/app/src/main/jniLibs/arm64-v8a/libpinitd.so

      - name: Grant execute permission for gradlew
        run: |
          cd android
          chmod +x gradlew

      - name: Build main APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Rename APK files and copy binaries
        run: |
          # Create release artifacts directory
          mkdir -p release-artifacts

          # Copy main APK
          cp android/app/build/outputs/apk/release/app-release.apk release-artifacts/pinitd.apk

          # Copy pinitd-cli binary
          cp target/aarch64-linux-android/release/pinitd-cli release-artifacts/pinitd-cli

      - name: Generate version tag
        id: version
        run: |
          TODAY=$(date +'%Y-%m-%d')

          # Get all existing releases for today (fetch more to avoid pagination issues)
          EXISTING=$(gh release list --limit 100 --json tagName --jq '.[].tagName' | grep "^${TODAY}\." || echo "")

          if [ -z "$EXISTING" ]; then
            # No releases today, start with .0
            BUILD_NUM=0
          else
            # Find highest build number for today
            BUILD_NUM=$(echo "$EXISTING" | sed "s/^${TODAY}\.//" | sort -n | tail -1)
            BUILD_NUM=$((BUILD_NUM + 1))
          fi

          echo "Existing releases for ${TODAY}: $EXISTING"
          echo "Next build number: $BUILD_NUM"

          VERSION="${TODAY}.${BUILD_NUM}"
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Alpha ${{ steps.version.outputs.tag }}
          prerelease: true
          generate_release_notes: true
          files: release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
