use android_31317_exploit::Cve31317Exploit;
use pinitd_common::android::fetch_package_path;

use crate::error::{Error, Result};
use std::sync::OnceLock;

static SHARED_EXPLOIT: OnceLock<Cve31317Exploit> = OnceLock::new();

pub async fn init_exploit(use_system_domain: bool) -> Result<()> {
    let path = fetch_package_path("com.penumbraos.pinitd").await?;

    let calling_package = if use_system_domain {
        "com.android.settings"
    } else {
        "com.android.shell"
    };

    let args = vec![
        "-cp".into(),
        path,
        "/system/bin".into(),
        "--application".into(),
        "com.penumbraos.pinitd.SettingWriter".into(),
        calling_package.into(),
    ];

    info!("Setting {args:?}");

    let exploit =
        Cve31317Exploit::new_with_command("/system/bin/app_process".into(), args.clone(), args);
    let _ = SHARED_EXPLOIT.set(exploit);

    Ok(())
}

pub fn exploit() -> Result<&'static Cve31317Exploit> {
    SHARED_EXPLOIT
        .get()
        .ok_or_else(|| Error::Unknown("Unexpected access to uninitialized SHARED_EXPLOIT".into()))
}
